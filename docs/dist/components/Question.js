import './Question.css.proxy.js';
/* src\components\Question.svelte generated by Svelte v3.30.1 */
import {
	SvelteComponent,
	add_render_callback,
	append,
	attr,
	check_outros,
	create_bidirectional_transition,
	create_in_transition,
	create_out_transition,
	destroy_each,
	detach,
	element,
	group_outros,
	init,
	insert,
	listen,
	noop,
	safe_not_equal,
	set_data,
	space,
	text,
	toggle_class,
	transition_in,
	transition_out
} from "../../web_modules/svelte/internal.js";

import { scale, fly, fade } from "../../web_modules/svelte/transition.js";
import { quintOut } from "../../web_modules/svelte/easing.js";
import { createEventDispatcher } from "../../web_modules/svelte.js";

function get_each_context(ctx, list, i) {
	const child_ctx = ctx.slice();
	child_ctx[9] = list[i];
	child_ctx[11] = i;
	return child_ctx;
}

// (227:8) {:else}
function create_else_block_1(ctx) {
	let div;
	let div_class_value;
	let div_intro;

	return {
		c() {
			div = element("div");
			attr(div, "class", div_class_value = "game__question-comment game__question-comment_" + /*currentQuestion*/ ctx[1] + " svelte-159a10h");
		},
		m(target, anchor) {
			insert(target, div, anchor);
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;

			if (dirty & /*currentQuestion*/ 2 && div_class_value !== (div_class_value = "game__question-comment game__question-comment_" + /*currentQuestion*/ ctx[1] + " svelte-159a10h")) {
				attr(div, "class", div_class_value);
			}
		},
		i(local) {
			if (!div_intro) {
				add_render_callback(() => {
					div_intro = create_in_transition(div, scale, {
						duration: 1000,
						opacity: 0,
						easing: quintOut
					});

					div_intro.start();
				});
			}
		},
		o: noop,
		d(detaching) {
			if (detaching) detach(div);
		}
	};
}

// (218:8) {#if !isCurrentQuestionDone}
function create_if_block_1(ctx) {
	let div3;
	let div1;
	let div0;
	let raw_value = /*questions*/ ctx[0][/*currentQuestion*/ ctx[1] - 1].title + "";
	let div1_transition;
	let t;
	let div2;
	let div2_transition;
	let current;

	return {
		c() {
			div3 = element("div");
			div1 = element("div");
			div0 = element("div");
			t = space();
			div2 = element("div");
			attr(div0, "class", "game__quote-text-inner svelte-159a10h");
			attr(div1, "class", "game__quote-text svelte-159a10h");
			attr(div2, "class", "game__quote-photo svelte-159a10h");
			attr(div3, "class", "game__quote svelte-159a10h");
		},
		m(target, anchor) {
			insert(target, div3, anchor);
			append(div3, div1);
			append(div1, div0);
			div0.innerHTML = raw_value;
			append(div3, t);
			append(div3, div2);
			current = true;
		},
		p(new_ctx, dirty) {
			ctx = new_ctx;
			if ((!current || dirty & /*questions, currentQuestion*/ 3) && raw_value !== (raw_value = /*questions*/ ctx[0][/*currentQuestion*/ ctx[1] - 1].title + "")) div0.innerHTML = raw_value;;
		},
		i(local) {
			if (current) return;

			add_render_callback(() => {
				if (!div1_transition) div1_transition = create_bidirectional_transition(
					div1,
					fly,
					{
						y: -100,
						opacity: 0,
						duration: 1000,
						easing: quintOut
					},
					true
				);

				div1_transition.run(1);
			});

			add_render_callback(() => {
				if (!div2_transition) div2_transition = create_bidirectional_transition(
					div2,
					fly,
					{
						x: 100,
						opacity: 0,
						duration: 1000,
						easing: quintOut
					},
					true
				);

				div2_transition.run(1);
			});

			current = true;
		},
		o(local) {
			if (!div1_transition) div1_transition = create_bidirectional_transition(
				div1,
				fly,
				{
					y: -100,
					opacity: 0,
					duration: 1000,
					easing: quintOut
				},
				false
			);

			div1_transition.run(0);

			if (!div2_transition) div2_transition = create_bidirectional_transition(
				div2,
				fly,
				{
					x: 100,
					opacity: 0,
					duration: 1000,
					easing: quintOut
				},
				false
			);

			div2_transition.run(0);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div3);
			if (detaching && div1_transition) div1_transition.end();
			if (detaching && div2_transition) div2_transition.end();
		}
	};
}

// (245:8) {:else}
function create_else_block(ctx) {
	let button;
	let button_intro;
	let mounted;
	let dispose;

	return {
		c() {
			button = element("button");
			button.textContent = "Дальше!";
			attr(button, "class", "game__btn svelte-159a10h");
		},
		m(target, anchor) {
			insert(target, button, anchor);

			if (!mounted) {
				dispose = listen(button, "click", /*handleNextClick*/ ctx[7]);
				mounted = true;
			}
		},
		p: noop,
		i(local) {
			if (!button_intro) {
				add_render_callback(() => {
					button_intro = create_in_transition(button, fade, { delay: 600 });
					button_intro.start();
				});
			}
		},
		o: noop,
		d(detaching) {
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

// (232:8) {#if !isNextQuestionReady}
function create_if_block(ctx) {
	let div;
	let current;
	let each_value = /*questions*/ ctx[0][/*currentQuestion*/ ctx[1] - 1].answers;
	let each_blocks = [];

	for (let i = 0; i < each_value.length; i += 1) {
		each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
	}

	const out = i => transition_out(each_blocks[i], 1, 1, () => {
		each_blocks[i] = null;
	});

	return {
		c() {
			div = element("div");

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].c();
			}

			attr(div, "class", "game__answers svelte-159a10h");
		},
		m(target, anchor) {
			insert(target, div, anchor);

			for (let i = 0; i < each_blocks.length; i += 1) {
				each_blocks[i].m(div, null);
			}

			current = true;
		},
		p(ctx, dirty) {
			if (dirty & /*isCurrentQuestionDone, currentQuestionAnswer, questions, currentQuestion, currentQuestionStatus, handleAnswerClick*/ 95) {
				each_value = /*questions*/ ctx[0][/*currentQuestion*/ ctx[1] - 1].answers;
				let i;

				for (i = 0; i < each_value.length; i += 1) {
					const child_ctx = get_each_context(ctx, each_value, i);

					if (each_blocks[i]) {
						each_blocks[i].p(child_ctx, dirty);
						transition_in(each_blocks[i], 1);
					} else {
						each_blocks[i] = create_each_block(child_ctx);
						each_blocks[i].c();
						transition_in(each_blocks[i], 1);
						each_blocks[i].m(div, null);
					}
				}

				group_outros();

				for (i = each_value.length; i < each_blocks.length; i += 1) {
					out(i);
				}

				check_outros();
			}
		},
		i(local) {
			if (current) return;

			for (let i = 0; i < each_value.length; i += 1) {
				transition_in(each_blocks[i]);
			}

			current = true;
		},
		o(local) {
			each_blocks = each_blocks.filter(Boolean);

			for (let i = 0; i < each_blocks.length; i += 1) {
				transition_out(each_blocks[i]);
			}

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			destroy_each(each_blocks, detaching);
		}
	};
}

// (234:16) {#each questions[currentQuestion - 1].answers as answer, i}
function create_each_block(ctx) {
	let div;
	let t0_value = /*answer*/ ctx[9] + "";
	let t0;
	let t1;
	let div_outro;
	let current;
	let mounted;
	let dispose;

	return {
		c() {
			div = element("div");
			t0 = text(t0_value);
			t1 = space();
			attr(div, "class", "game__answer game__btn svelte-159a10h");
			toggle_class(div, "game__answer_selected", /*isCurrentQuestionDone*/ ctx[4] && /*i*/ ctx[11] == /*currentQuestionAnswer*/ ctx[2]);
			toggle_class(div, "game__answer_correct", /*isCurrentQuestionDone*/ ctx[4] && /*i*/ ctx[11] == /*currentQuestionAnswer*/ ctx[2] && /*i*/ ctx[11] == /*questions*/ ctx[0][/*currentQuestion*/ ctx[1] - 1].answer);
			toggle_class(div, "game__answer_incorrect", /*isCurrentQuestionDone*/ ctx[4] && /*i*/ ctx[11] == /*currentQuestionAnswer*/ ctx[2] && /*currentQuestionStatus*/ ctx[3] === "incorrect");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			append(div, t0);
			append(div, t1);
			current = true;

			if (!mounted) {
				dispose = listen(div, "click", /*handleAnswerClick*/ ctx[6]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if ((!current || dirty & /*questions, currentQuestion*/ 3) && t0_value !== (t0_value = /*answer*/ ctx[9] + "")) set_data(t0, t0_value);

			if (dirty & /*isCurrentQuestionDone, currentQuestionAnswer*/ 20) {
				toggle_class(div, "game__answer_selected", /*isCurrentQuestionDone*/ ctx[4] && /*i*/ ctx[11] == /*currentQuestionAnswer*/ ctx[2]);
			}

			if (dirty & /*isCurrentQuestionDone, currentQuestionAnswer, questions, currentQuestion*/ 23) {
				toggle_class(div, "game__answer_correct", /*isCurrentQuestionDone*/ ctx[4] && /*i*/ ctx[11] == /*currentQuestionAnswer*/ ctx[2] && /*i*/ ctx[11] == /*questions*/ ctx[0][/*currentQuestion*/ ctx[1] - 1].answer);
			}

			if (dirty & /*isCurrentQuestionDone, currentQuestionAnswer, currentQuestionStatus*/ 28) {
				toggle_class(div, "game__answer_incorrect", /*isCurrentQuestionDone*/ ctx[4] && /*i*/ ctx[11] == /*currentQuestionAnswer*/ ctx[2] && /*currentQuestionStatus*/ ctx[3] === "incorrect");
			}
		},
		i(local) {
			if (current) return;
			if (div_outro) div_outro.end(1);
			current = true;
		},
		o(local) {
			div_outro = create_out_transition(div, fly, {
				x: 100,
				opacity: 0,
				delay: /*i*/ ctx[11] * 100
			});

			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if (detaching && div_outro) div_outro.end();
			mounted = false;
			dispose();
		}
	};
}

function create_fragment(ctx) {
	let div1;
	let header;
	let div0;
	let t0;
	let t1;
	let t2_value = /*questions*/ ctx[0].length + "";
	let t2;
	let t3;
	let current_block_type_index;
	let if_block0;
	let t4;
	let footer;
	let current_block_type_index_1;
	let if_block1;
	let current;
	const if_block_creators = [create_if_block_1, create_else_block_1];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (!/*isCurrentQuestionDone*/ ctx[4]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
	const if_block_creators_1 = [create_if_block, create_else_block];
	const if_blocks_1 = [];

	function select_block_type_1(ctx, dirty) {
		if (!/*isNextQuestionReady*/ ctx[5]) return 0;
		return 1;
	}

	current_block_type_index_1 = select_block_type_1(ctx, -1);
	if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);

	return {
		c() {
			div1 = element("div");
			header = element("header");
			div0 = element("div");
			t0 = text(/*currentQuestion*/ ctx[1]);
			t1 = text("/");
			t2 = text(t2_value);
			t3 = space();
			if_block0.c();
			t4 = space();
			footer = element("footer");
			if_block1.c();
			attr(div0, "class", "game__counter svelte-159a10h");
			attr(header, "class", "game__title svelte-159a10h");
			attr(footer, "class", "game__footer svelte-159a10h");
			attr(div1, "class", "game__question svelte-159a10h");
			toggle_class(div1, "game__question_done", /*isCurrentQuestionDone*/ ctx[4]);
		},
		m(target, anchor) {
			insert(target, div1, anchor);
			append(div1, header);
			append(header, div0);
			append(div0, t0);
			append(div0, t1);
			append(div0, t2);
			append(header, t3);
			if_blocks[current_block_type_index].m(header, null);
			append(div1, t4);
			append(div1, footer);
			if_blocks_1[current_block_type_index_1].m(footer, null);
			current = true;
		},
		p(ctx, [dirty]) {
			if (!current || dirty & /*currentQuestion*/ 2) set_data(t0, /*currentQuestion*/ ctx[1]);
			if ((!current || dirty & /*questions*/ 1) && t2_value !== (t2_value = /*questions*/ ctx[0].length + "")) set_data(t2, t2_value);
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block0 = if_blocks[current_block_type_index];

				if (!if_block0) {
					if_block0 = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block0.c();
				} else {
					if_block0.p(ctx, dirty);
				}

				transition_in(if_block0, 1);
				if_block0.m(header, null);
			}

			let previous_block_index_1 = current_block_type_index_1;
			current_block_type_index_1 = select_block_type_1(ctx, dirty);

			if (current_block_type_index_1 === previous_block_index_1) {
				if_blocks_1[current_block_type_index_1].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks_1[previous_block_index_1], 1, 1, () => {
					if_blocks_1[previous_block_index_1] = null;
				});

				check_outros();
				if_block1 = if_blocks_1[current_block_type_index_1];

				if (!if_block1) {
					if_block1 = if_blocks_1[current_block_type_index_1] = if_block_creators_1[current_block_type_index_1](ctx);
					if_block1.c();
				} else {
					if_block1.p(ctx, dirty);
				}

				transition_in(if_block1, 1);
				if_block1.m(footer, null);
			}

			if (dirty & /*isCurrentQuestionDone*/ 16) {
				toggle_class(div1, "game__question_done", /*isCurrentQuestionDone*/ ctx[4]);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block0);
			transition_in(if_block1);
			current = true;
		},
		o(local) {
			transition_out(if_block0);
			transition_out(if_block1);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div1);
			if_blocks[current_block_type_index].d();
			if_blocks_1[current_block_type_index_1].d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { questions } = $$props;
	let { currentQuestion } = $$props;
	let { currentQuestionAnswer } = $$props;
	let { currentQuestionStatus } = $$props;
	let { isCurrentQuestionDone } = $$props;
	let { isNextQuestionReady } = $$props;
	const dispatch = createEventDispatcher();

	function handleAnswerClick(e) {
		dispatch("answer", { event: e });
	}

	function handleNextClick() {
		dispatch("next");
	}

	$$self.$$set = $$props => {
		if ("questions" in $$props) $$invalidate(0, questions = $$props.questions);
		if ("currentQuestion" in $$props) $$invalidate(1, currentQuestion = $$props.currentQuestion);
		if ("currentQuestionAnswer" in $$props) $$invalidate(2, currentQuestionAnswer = $$props.currentQuestionAnswer);
		if ("currentQuestionStatus" in $$props) $$invalidate(3, currentQuestionStatus = $$props.currentQuestionStatus);
		if ("isCurrentQuestionDone" in $$props) $$invalidate(4, isCurrentQuestionDone = $$props.isCurrentQuestionDone);
		if ("isNextQuestionReady" in $$props) $$invalidate(5, isNextQuestionReady = $$props.isNextQuestionReady);
	};

	return [
		questions,
		currentQuestion,
		currentQuestionAnswer,
		currentQuestionStatus,
		isCurrentQuestionDone,
		isNextQuestionReady,
		handleAnswerClick,
		handleNextClick
	];
}

class Question extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			questions: 0,
			currentQuestion: 1,
			currentQuestionAnswer: 2,
			currentQuestionStatus: 3,
			isCurrentQuestionDone: 4,
			isNextQuestionReady: 5
		});
	}
}

export default Question;