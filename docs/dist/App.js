import './App.css.proxy.js';
/* src\App.svelte generated by Svelte v3.30.1 */
import {
	HtmlTag,
	SvelteComponent,
	append,
	attr,
	binding_callbacks,
	check_outros,
	create_component,
	destroy_component,
	detach,
	element,
	group_outros,
	init,
	insert,
	listen,
	mount_component,
	noop,
	safe_not_equal,
	set_data,
	space,
	text,
	transition_in,
	transition_out
} from "../web_modules/svelte/internal.js";

import Question from "./Question.js";
import { afterUpdate } from "../web_modules/svelte.js";
import { fade } from "../web_modules/svelte/transition.js";

function create_else_block(ctx) {
	let div;
	let current_block_type_index;
	let if_block;
	let current;
	const if_block_creators = [create_if_block_1, create_else_block_1];
	const if_blocks = [];

	function select_block_type_1(ctx, dirty) {
		if (!/*isGameFinished*/ ctx[6]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type_1(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			div = element("div");
			if_block.c();
			attr(div, "class", "game__layer svelte-9hskz");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if_blocks[current_block_type_index].m(div, null);
			current = true;
		},
		p(ctx, dirty) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type_1(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(div, null);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if_blocks[current_block_type_index].d();
		}
	};
}

// (255:4) {#if !isGameStarted}
function create_if_block(ctx) {
	let div2;
	let html_tag;
	let t0;
	let button;
	let t1;
	let t2;
	let div1;
	let h3;
	let t4;
	let div0;
	let mounted;
	let dispose;

	return {
		c() {
			div2 = element("div");
			t0 = space();
			button = element("button");
			t1 = text(/*startBtnText*/ ctx[1]);
			t2 = space();
			div1 = element("div");
			h3 = element("h3");
			h3.textContent = "ПОДЕЛИТЬСЯ:";
			t4 = space();
			div0 = element("div");
			html_tag = new HtmlTag(t0);
			attr(button, "class", "game__btn");
			attr(h3, "class", "svelte-9hskz");
			attr(div0, "class", "ya-share2");
			attr(div0, "data-services", /*shareServices*/ ctx[4]);
			attr(div1, "class", "game__share svelte-9hskz");
			attr(div2, "class", "game__layer game__layer_intro svelte-9hskz");
		},
		m(target, anchor) {
			insert(target, div2, anchor);
			html_tag.m(/*desc*/ ctx[0], div2);
			append(div2, t0);
			append(div2, button);
			append(button, t1);
			append(div2, t2);
			append(div2, div1);
			append(div1, h3);
			append(div1, t4);
			append(div1, div0);

			if (!mounted) {
				dispose = listen(button, "click", /*handleStart*/ ctx[15]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*desc*/ 1) html_tag.p(/*desc*/ ctx[0]);
			if (dirty & /*startBtnText*/ 2) set_data(t1, /*startBtnText*/ ctx[1]);

			if (dirty & /*shareServices*/ 16) {
				attr(div0, "data-services", /*shareServices*/ ctx[4]);
			}
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(div2);
			mounted = false;
			dispose();
		}
	};
}

// (277:12) {:else}
function create_else_block_1(ctx) {
	let header;
	let div0;
	let t0_value = /*questions*/ ctx[3].length + "";
	let t0;
	let t1;
	let t2_value = /*questions*/ ctx[3].length + "";
	let t2;
	let t3;
	let div2;
	let div1;
	let t4;
	let t5;
	let t6;
	let t7_value = /*questions*/ ctx[3].length + "";
	let t7;
	let t8;
	let html_tag;
	let t9;
	let div4;
	let h3;
	let t11;
	let div3;
	let t12;
	let button;
	let t13;
	let mounted;
	let dispose;

	return {
		c() {
			header = element("header");
			div0 = element("div");
			t0 = text(t0_value);
			t1 = text("/");
			t2 = text(t2_value);
			t3 = space();
			div2 = element("div");
			div1 = element("div");
			t4 = text("Мой результат: ");
			t5 = text(/*points*/ ctx[12]);
			t6 = text(" из ");
			t7 = text(t7_value);
			t8 = space();
			t9 = space();
			div4 = element("div");
			h3 = element("h3");
			h3.textContent = "ПОДЕЛИТЬСЯ РЕЗУЛЬТАТОМ:";
			t11 = space();
			div3 = element("div");
			t12 = space();
			button = element("button");
			t13 = text(/*reloadBtnText*/ ctx[2]);
			attr(div0, "class", "game__counter");
			attr(div1, "class", "game__score svelte-9hskz");
			html_tag = new HtmlTag(null);
			attr(div2, "class", "game__result");
			attr(header, "class", "game__title");
			attr(h3, "class", "svelte-9hskz");
			attr(div3, "class", "share");
			attr(div4, "class", "game__share svelte-9hskz");
			attr(button, "class", "game__btn game__btn_reload svelte-9hskz");
		},
		m(target, anchor) {
			insert(target, header, anchor);
			append(header, div0);
			append(div0, t0);
			append(div0, t1);
			append(div0, t2);
			append(header, t3);
			append(header, div2);
			append(div2, div1);
			append(div1, t4);
			append(div1, t5);
			append(div1, t6);
			append(div1, t7);
			append(div2, t8);
			html_tag.m(/*result*/ ctx[13], div2);
			insert(target, t9, anchor);
			insert(target, div4, anchor);
			append(div4, h3);
			append(div4, t11);
			append(div4, div3);
			/*div3_binding*/ ctx[22](div3);
			insert(target, t12, anchor);
			insert(target, button, anchor);
			append(button, t13);

			if (!mounted) {
				dispose = listen(button, "click", /*handleReload*/ ctx[18]);
				mounted = true;
			}
		},
		p(ctx, dirty) {
			if (dirty & /*questions*/ 8 && t0_value !== (t0_value = /*questions*/ ctx[3].length + "")) set_data(t0, t0_value);
			if (dirty & /*questions*/ 8 && t2_value !== (t2_value = /*questions*/ ctx[3].length + "")) set_data(t2, t2_value);
			if (dirty & /*points*/ 4096) set_data(t5, /*points*/ ctx[12]);
			if (dirty & /*questions*/ 8 && t7_value !== (t7_value = /*questions*/ ctx[3].length + "")) set_data(t7, t7_value);
			if (dirty & /*result*/ 8192) html_tag.p(/*result*/ ctx[13]);
			if (dirty & /*reloadBtnText*/ 4) set_data(t13, /*reloadBtnText*/ ctx[2]);
		},
		i: noop,
		o: noop,
		d(detaching) {
			if (detaching) detach(header);
			if (detaching) detach(t9);
			if (detaching) detach(div4);
			/*div3_binding*/ ctx[22](null);
			if (detaching) detach(t12);
			if (detaching) detach(button);
			mounted = false;
			dispose();
		}
	};
}

// (266:12) {#if !isGameFinished}
function create_if_block_1(ctx) {
	let question;
	let current;

	question = new Question({
			props: {
				questions: /*questions*/ ctx[3],
				currentQuestion: /*currentQuestion*/ ctx[7],
				currentQuestionAnswer: /*currentQuestionAnswer*/ ctx[11],
				currentQuestionStatus: /*currentQuestionStatus*/ ctx[10],
				isCurrentQuestionDone: /*isCurrentQuestionDone*/ ctx[8],
				isNextQuestionReady: /*isNextQuestionReady*/ ctx[9]
			}
		});

	question.$on("answer", /*handleAnswerClick*/ ctx[16]);
	question.$on("next", /*handleNext*/ ctx[17]);

	return {
		c() {
			create_component(question.$$.fragment);
		},
		m(target, anchor) {
			mount_component(question, target, anchor);
			current = true;
		},
		p(ctx, dirty) {
			const question_changes = {};
			if (dirty & /*questions*/ 8) question_changes.questions = /*questions*/ ctx[3];
			if (dirty & /*currentQuestion*/ 128) question_changes.currentQuestion = /*currentQuestion*/ ctx[7];
			if (dirty & /*currentQuestionAnswer*/ 2048) question_changes.currentQuestionAnswer = /*currentQuestionAnswer*/ ctx[11];
			if (dirty & /*currentQuestionStatus*/ 1024) question_changes.currentQuestionStatus = /*currentQuestionStatus*/ ctx[10];
			if (dirty & /*isCurrentQuestionDone*/ 256) question_changes.isCurrentQuestionDone = /*isCurrentQuestionDone*/ ctx[8];
			if (dirty & /*isNextQuestionReady*/ 512) question_changes.isNextQuestionReady = /*isNextQuestionReady*/ ctx[9];
			question.$set(question_changes);
		},
		i(local) {
			if (current) return;
			transition_in(question.$$.fragment, local);
			current = true;
		},
		o(local) {
			transition_out(question.$$.fragment, local);
			current = false;
		},
		d(detaching) {
			destroy_component(question, detaching);
		}
	};
}

function create_fragment(ctx) {
	let div;
	let current_block_type_index;
	let if_block;
	let current;
	const if_block_creators = [create_if_block, create_else_block];
	const if_blocks = [];

	function select_block_type(ctx, dirty) {
		if (!/*isGameStarted*/ ctx[5]) return 0;
		return 1;
	}

	current_block_type_index = select_block_type(ctx, -1);
	if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

	return {
		c() {
			div = element("div");
			if_block.c();
			attr(div, "class", "game svelte-9hskz");
		},
		m(target, anchor) {
			insert(target, div, anchor);
			if_blocks[current_block_type_index].m(div, null);
			current = true;
		},
		p(ctx, [dirty]) {
			let previous_block_index = current_block_type_index;
			current_block_type_index = select_block_type(ctx, dirty);

			if (current_block_type_index === previous_block_index) {
				if_blocks[current_block_type_index].p(ctx, dirty);
			} else {
				group_outros();

				transition_out(if_blocks[previous_block_index], 1, 1, () => {
					if_blocks[previous_block_index] = null;
				});

				check_outros();
				if_block = if_blocks[current_block_type_index];

				if (!if_block) {
					if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
					if_block.c();
				} else {
					if_block.p(ctx, dirty);
				}

				transition_in(if_block, 1);
				if_block.m(div, null);
			}
		},
		i(local) {
			if (current) return;
			transition_in(if_block);
			current = true;
		},
		o(local) {
			transition_out(if_block);
			current = false;
		},
		d(detaching) {
			if (detaching) detach(div);
			if_blocks[current_block_type_index].d();
		}
	};
}

function instance($$self, $$props, $$invalidate) {
	let { desc } = $$props;
	let { startBtnText } = $$props;
	let { nextBtnText } = $$props;
	let { reloadBtnText } = $$props;
	let { questions } = $$props;
	let { results } = $$props;
	let { shareHeading } = $$props;
	let { shareServices } = $$props;
	let isGameStarted = false;
	let isGameFinished = false;
	let currentQuestion = 1;
	let isCurrentQuestionDone = false;
	let isNextQuestionReady = false;
	let currentQuestionStatus = null;
	let currentQuestionAnswer = null;
	let points = 0;
	let result = "";
	let resultShare;
	let resultShareEl;

	afterUpdate(() => {
		if (isGameFinished && !resultShare) {
			resultShare = Ya.share2(resultShareEl, { theme: { services: shareServices } });
		}
	});

	function handleStart() {
		$$invalidate(5, isGameStarted = true);
	}

	function handleAnswerClick(event) {
		if (isCurrentQuestionDone) return false;
		let el = event.detail.event.currentTarget;
		let answer = [].slice.call(el.parentNode.children).indexOf(el);

		if (questions[currentQuestion - 1].answer == answer) {
			$$invalidate(10, currentQuestionStatus = "correct");
			$$invalidate(12, points++, points);
		} else {
			$$invalidate(10, currentQuestionStatus = "incorrect");
		}

		$$invalidate(11, currentQuestionAnswer = answer);
		$$invalidate(8, isCurrentQuestionDone = true);

		setTimeout(
			() => {
				$$invalidate(9, isNextQuestionReady = true);
			},
			2000
		);
	}

	function handleNext() {
		if (currentQuestion == questions.length) {
			setResult();
		}

		$$invalidate(7, currentQuestion++, currentQuestion);
		$$invalidate(8, isCurrentQuestionDone = false);
		$$invalidate(9, isNextQuestionReady = false);
		$$invalidate(11, currentQuestionAnswer = null);
	}

	function handleReload() {
		$$invalidate(6, isGameFinished = false);
		$$invalidate(12, points = 0);
		$$invalidate(7, currentQuestion = 1);
		$$invalidate(8, isCurrentQuestionDone = false);
		$$invalidate(11, currentQuestionAnswer = null);
		resultShare = null;
	}

	function setResult() {
		$$invalidate(6, isGameFinished = true);

		if (points < 11) {
			$$invalidate(13, result = results[0]);
		} else if (points < 21) {
			$$invalidate(13, result = results[1]);
		} else {
			$$invalidate(13, result = results[2]);
		}
	}

	function div3_binding($$value) {
		binding_callbacks[$$value ? "unshift" : "push"](() => {
			resultShareEl = $$value;
			$$invalidate(14, resultShareEl);
		});
	}

	$$self.$$set = $$props => {
		if ("desc" in $$props) $$invalidate(0, desc = $$props.desc);
		if ("startBtnText" in $$props) $$invalidate(1, startBtnText = $$props.startBtnText);
		if ("nextBtnText" in $$props) $$invalidate(19, nextBtnText = $$props.nextBtnText);
		if ("reloadBtnText" in $$props) $$invalidate(2, reloadBtnText = $$props.reloadBtnText);
		if ("questions" in $$props) $$invalidate(3, questions = $$props.questions);
		if ("results" in $$props) $$invalidate(20, results = $$props.results);
		if ("shareHeading" in $$props) $$invalidate(21, shareHeading = $$props.shareHeading);
		if ("shareServices" in $$props) $$invalidate(4, shareServices = $$props.shareServices);
	};

	return [
		desc,
		startBtnText,
		reloadBtnText,
		questions,
		shareServices,
		isGameStarted,
		isGameFinished,
		currentQuestion,
		isCurrentQuestionDone,
		isNextQuestionReady,
		currentQuestionStatus,
		currentQuestionAnswer,
		points,
		result,
		resultShareEl,
		handleStart,
		handleAnswerClick,
		handleNext,
		handleReload,
		nextBtnText,
		results,
		shareHeading,
		div3_binding
	];
}

class App extends SvelteComponent {
	constructor(options) {
		super();

		init(this, options, instance, create_fragment, safe_not_equal, {
			desc: 0,
			startBtnText: 1,
			nextBtnText: 19,
			reloadBtnText: 2,
			questions: 3,
			results: 20,
			shareHeading: 21,
			shareServices: 4
		});
	}
}

export default App;